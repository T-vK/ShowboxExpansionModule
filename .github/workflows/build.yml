name: Build and Release Firmware

on:
  push:
    branches:
      - main
    paths:
      - '**'
      - '!index.html'
#  release:
#    types: [created]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install PlatformIO
        run: pip install platformio

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Get environments from platformio.ini
        id: get_envs
        run: |
          environments=$(grep -oP '^\s*\[env:\K[^\]]+' platformio.ini | tr '\n' ' ')
          echo "Environments: $environments"
          echo "envs=$environments" >> $GITHUB_ENV

      - name: Predict Semantic Version
        id: predict_version
        run: |
          # Run semantic-release in dry-run mode and capture the output
          npx semantic-release --dry-run | tee semantic-release.stdout
          # Extract the predicted version from the output
          PREDICTED_VERSION="$(awk '/the next release version is/ {print $NF}' semantic-release.stdout)"
          echo "Predicted version: $PREDICTED_VERSION"
          echo "predicted_version=$PREDICTED_VERSION" >> $GITHUB_ENV

      - name: Build firmware for all environments
        run: |
          environments=(${{ env.envs }})
          for env in "${environments[@]}"; do
            echo "Building for environment: $env with version: ${{ env.predicted_version }}"
            SXM_VERSION="${{ env.predicted_version }}"
            platformio run -e "$env"
          done

      - name: Run Semantic Release
        id: semantic_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx semantic-release
          git tag -l --points-at HEAD
          echo "new_release_tag=$(git tag -l --points-at HEAD)" >> $GITHUB_ENV

      - name: Move firmware files to /tmp
        run: |
          mkdir -p /tmp/firmware/${{ env.new_release_tag }}
          mv .pio/build/*/sbxm-firmware-*.bin /tmp/firmware/${{ env.new_release_tag }}

      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: gh-pages

      - name: Copy built binaries
        run: |
          mkdir -p firmware/${{ env.new_release_tag }}
          mv /tmp/firmware/${{ env.new_release_tag }}/* firmware/${{ env.new_release_tag }}

      - name: Commit and push binaries to gh-pages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git add firmware/${{ env.new_release_tag }}
          git commit --amend --no-edit
          git push --force origin gh-pages
