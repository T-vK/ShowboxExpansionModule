name: Build and Release Firmware

on:
  push:
    branches:
      - main
    paths:
      - '**'
      - '!index.html'

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      predicted_version: ${{ steps.predict_version.outputs.predicted_version }}
      version_available: ${{ steps.predict_version.outputs.version_available }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Predict Semantic Version
        id: predict_version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx semantic-release --dry-run | tee semantic-release.stdout || {
            echo "Error: Semantic release dry-run failed!"
          }

          PREDICTED_VERSION="$(awk '/he next release version is/ {print $NF}' semantic-release.stdout)"
          echo "Predicted version: $PREDICTED_VERSION"

          if [ -z "$PREDICTED_VERSION" ]; then
            echo "No new version detected, skipping build and release."
            echo "::set-output name=version_available::false"
          else
            echo "::set-output name=version_available::true"
          fi

          echo "::set-output name=predicted_version::$PREDICTED_VERSION"

  build:
    runs-on: ubuntu-latest
    needs: check-version
    if: needs.check-version.outputs.version_available == 'true'
    outputs:
      artifact_path: ${{ steps.upload_firmware.outputs.artifact_path }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install PlatformIO
        run: pip install platformio

      - name: Get environments from platformio.ini
        id: get_envs
        run: |
          environments=$(grep -oP '^\s*\[env:\K[^\]]+' platformio.ini | tr '\n' ' ')
          echo "Environments: $environments"
          echo "envs=$environments" >> $GITHUB_ENV

      - name: Build firmware for all environments
        run: |
          environments=(${{ env.envs }})
          for env in "${environments[@]}"; do
            echo "Building for environment: $env with version: ${{ needs.check-version.outputs.predicted_version }}"
            export SXM_VERSION="${{ needs.check-version.outputs.predicted_version }}"
            platformio run -e "$env"
          done

      - name: Upload firmware artifacts
        id: upload_firmware
        uses: actions/upload-artifact@v4
        with:
          name: firmware
          path: .pio/build/*/sbxm-firmware-*.bin

  release:
    runs-on: ubuntu-latest
    needs: build
    if: needs.check-version.outputs.version_available == 'true'
    steps:
      - name: Download firmware artifacts
        uses: actions/download-artifact@v4
        with:
          name: firmware
          path: /tmp/firmware

      - name: Checkout code
        uses: actions/checkout@v4
  
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Run Semantic Release
        id: semantic_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx semantic-release
          git tag -l --points-at HEAD
          echo "new_release_tag=$(git tag -l --points-at HEAD)" >> $GITHUB_ENV

      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: gh-pages

      - name: Copy firmware files
        run: |
          mkdir -p firmware/${{ env.new_release_tag }}
          mv /tmp/firmware/* firmware/${{ env.new_release_tag }}

      - name: Commit and push firmware
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git add firmware/${{ env.new_release_tag }}
          git commit --amend --no-edit
          git push --force origin gh-pages
